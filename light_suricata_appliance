Summary: 
I took on the project of coming up with a quickly deployable NIDS 
that can be installed on old crap and still work great. 
I work at a small business and it's important to me 
to figure out how to still have nice things that 
actually work as intended.  

Requirements: 
- Must work flawlessly on a discarded eMachine e-series with single core processor
- Must take as few days to initially deploy as possible
- Must detect botnet activity, trojan droppers, and auto-update threats

I began with a few other distros and cominations of packages, but quickly fell into smoothsec.  
#########################################################################################################################
### smoothsec is a lightweight snort/surricata IDS with snorby, unified2, pulledpork, pigsty, built on debian wheezy ###
#####################  more info on smoothsec is available at https://github.com/smoothsec/docs/wiki  ###################
# download smoothsec install iso from https://sourceforge.net/projects/smoothsec/
# burn onto a thumb drive
# boot machine into usb
# follow the install script
## installing from iso... ###############################################################################################
#setup new root passwd
#setup new user
#setup new user passwd
#setup snorby account info
#setup snorby account passwd
#reboot
# we have to update this before we move on, for reasons
npm update pigsty -g && npm update pigsty-mysql -g
###############################################
# include arpalert and fail2ban for securing the appliance
apt-get install arpalert openjdk-7-jre fail2ban
# update the arpalert oui list
cd /etc/arpalert/
mv oui.txt oui.txt.old
apt-get -y rsyslog
wget http://http://standards-oui.ieee.org/oui.txt
############################################################
# upgrade dist to jessie, since wheezy is EOL && dangerous #
############################################################
# first update all archived
sudo apt-get update
sudo apt-get upgrade
sudo apt-get dist-upgrade
# Next replace repositories "wheezy" with "jessie"
sudo sed -i /deb/s/wheezy/jessie/g /etc/apt/sources.list
sudo sed -i /deb/s/wheez/jessie/g /etc/apt/sources.list.d/*.list
# next update and import the new package lists
sudo apt-get update
# next upgrade new packages and upgrade wheezy to jessie
sudo apt-get upgrade -y
sudo apt-get dist-upgrade -y # follow the prompts
# finally clean up old packages and leftovers
sudo apt-get autoremove -y && sudo apt-get autoclean -y
###############################################
# back to initial configuration
# 1. visit http://<newIp>:443 and configure snorby
# 2. set everything else under Administration>
# 3. create a csv of your assets by ip,name and upload it to Snorby
# 4. set time zone under settings> 
# NOTE: you can also configure timezone as shown here (recommended): 
sudo nano /var/www/snorby/config/config/snorby_config.yml
# reflect these changes, mind the tabs
production:
  domain: demo.snorby.org
  wkhtmltopdf: /usr/local/bin/wkhtmltopdf
  ssl: false
  mailer_sender: snorby@snorby.org
  geoip_uri: http://geolite.maxmind.com/download/geoip/database/GeoLiteCountry/GeoIP.dat.gz
  authentication_mode: database
  time_zone: 'America/Chicago'
development:
  domain: localhost:3000
  wkhtmltopdf: /Users/mephux/.rvm/gems/ruby-1.9.2-p0/bin/wkhtmltopdf
  ssl: false
  mailer_sender: snorby@snorby.org
  geoip_uri: http://geolite.maxmind.com/download/geoip/database/GeoLiteCountry/GeoIP.dat.gz
  time_zone: 'Africa/Freetown'
###############################################
# add pulledpork to crontab
04 05 * * * /usr/local/bin/pulledpork.pl -c /etc/pulledpork/snort/pulledpork.conf -l
# install other useful stuff
apt-get install -y htop
apt-get install -y iftop
###############################################
# go into the following and configure according to your use case
/etc/smoothsec.cfg # check all options, ensure paths are correct, correct monitor interface and domain
/etc/arpalert.conf # check file paths
/etc/snort/snort.conf # pay attention to paths, disable/enable options, and rule path in section 7
/etc/suricata/suricata.yaml # pay attention to paths and disable/enable options
/etc/pulledpork/snort/* # enable rulesets one at a time and verify resource usage with htop
/etc/pulledpork/suricata/* # enable rulesets one at a time and verify resource usage with htop
###############################################
### Install is complete.  
###############################################	
### at this point, running htop while monitoring via Snorby shows that 
### snort deployment pulls about 0.8GB ram usage and 4-10% CPU.  
### suricata deployment pulls about 0.9GB ram usage and 5-12% CPU.  
### dual deployment pulls just over 2GB ram usage and 10-20% CPU.
### NOTE: looks like more can be done with suricata as far as tuning and alerting
########################################################################
################ moving to suricata performance tuning #################
### initial false positives and performance tuning
### always investigate and verify beyond shadow of doubt that it is a false positive
### always verify that performance tuning has not negatively impacted performance
############################## rules ###################################
Top False Positive generatoring rules: 
1:200920[5-7]
1:2027768
############################ performance ###############################
# 1. https://suricata.readthedocs.io/en/suricata-4.1.2/performance/tuning-considerations.html
# always allow some time for the machine to settle into it's new baseline
########################################################################
#### baseline before: 6.6%_CPU 1479MB_Mem 0MB_Swp ######################
########################################################################
sudo nano /etc/suricata/suricata.yaml
# uncomment max-pending-packets, set to 2048
# install tcmalloc, an optimized thread-caching malloc for C++ binaries
apt-get install libtcmalloc-minimal4
# load tcmalloc before and instead of malloc
sudo nano /etc/init.d/suricata
# under start and restart, change this
/usr/local/bin/suricata --user suricata -c /etc/suricata/suricata.yaml -i $INTERFACE_DEF -D
# to this
LD_PRELOAD=‚Äù/usr/lib/libtcmalloc_minimal.so.0" /usr/local/bin/suricata --user suricata -c /etc/suricata/suricata.yaml -i $INTERFACE_DEF -D
# now run the restart script and verify that suricata is still working
ps ax | grep suricata  # should show the original path under instance
htop  # should be less Mem usage
########################################################################
#### baseline changed: 7.1%_CPU 1159MB_Mem 0MB_Swp #####################
########################################################################


# 2. https://suricon.net/wp-content/uploads/2016/11/SuriCon2016_MichalPurzynski_PeterManev.pdf












#####################################################################################################################
#### below are the failed installs ##################################################################################
#### leading up to the above steps ##################################################################################
#####################################################################################################################

#installed from instructions found at http://sublimerobots.com/2017/01/snort-2-9-9-x-ubuntu-systemd-scripts/
#remember to edit those *.conf files in /etc/snort/!!
#remember to add pulledpork to crontab!!
######## exclude me ###################
#@ BASE url step, if php7.x is present then in cli run:
sudo a2dismod php7.x ; sudo a2enmod php5.6 ; sudo service apache2 restart ; sudo systemctl restart apache2
#where 7.x is the php vers.  this downgrades to php5.6
#then revisit http://ip/base/index.php
#######################################

#whitepaper: https://infoscience.epfl.ch/record/141022/files/pdm.pdf
#read 8.4 on oinkmaster
#use A additional data for tuning use
#note that most of this is already tuned by fresh install

#elkstack install
#from https://linuxconfig.org/install-elk-on-ubuntu-18-04-bionic-beaver-linux
	sudo apt install openjdk-8-jre apt-transport-https wget nginx
	wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
#Create a file at /etc/apt/sources.list.d/elastic.list, and paste the following line into it.
	deb https://artifacts.elastic.co/packages/6.x/apt stable main
		#Save that file, and exit. Update Apt.
		sudo apt update
#install elastisearch and kibana
	sudo apt install elasticsearch kibana
	nano /etc/kibana/kibana.yml
		#uncomment server.host: "localhost"
		sudo systemctl restart kibana
		sudo systemctl start elasticsearch
#set up nginx
	echo "admin:`openssl passwd -apr1 YourPassword`" | sudo tee -a /etc/nginx/htpasswd.kibana
	sudo touch /etc/nginx/sites-available/kibana
	nano /etc/nginx/sites-available/kibana
		server {
				listen 80;
				listen [::]:80 ipv6only=on;

				server_name your-site.com;

				auth_basic "Restricted Access";
				auth_basic_user_file /etc/nginx/htpasswd.kibana;

				location / {
					proxy_pass http://localhost:5601;
					proxy_http_version 1.1;
					proxy_set_header Upgrade $http_upgrade;
					proxy_set_header Connection 'upgrade';
					proxy_set_header Host $host;
					proxy_cache_bypass $http_upgrade;        
				}
			}
	sudo rm /etc/nginx/sites-enabled/default
	sudo ln -s /etc/nginx/sites-available/kibana /etc/nginx/sites-enabled/kibana
	sudo systemctl restart nginx
		#if 98 error, then
			sudo fuser -k 80/tcp && sudo fuser -k 443/tcp
			sudo netstat -tulpn (to check for any :80 process left over)
				#if still a service then of course sudo systemctl stop <service>
					sudo systemctl start nginx
#install logstash
	sudo apt install logstash
		#sign into kibana via browser
		#http://localhost:5601 (see proxy_pass above)
#finish config via browser gui.

#integrate snort into elkstack with synesis_lite_snort
#from https://github.com/robcowart/synesis_lite_snort/blob/master/README.md
#cloned currently, prepared for dist
#done. had to individually edit ea .conf and cp syn* files into filebeat dir.  
#dashboard imported per robcowart git readme. 
#error on kibana dashboard buckets, "the aggregation key is missing"
#suspect nginx issue from /etc/nginx/sites-available/kibana openssl import.  
#been watching htop with all this stuff running.  fuck this, apt-get remove && autoclean everything !snort/barnyard2/unified2.  
#u2spewfoo snort.u2.* > ~/Desktop/parseme for first huge tuning session.  

#after looking around, try snorby.
#snorby pre-req's: snort && ruby >=1.9.0 <2.0.0 && rails >=3.0.0 
#tried https://github.com/rvm/ubuntu_rvm
#result: unsuccessful install multiple times, even after running ~/.rvm and ~/.bashrc scripts found on stackexchange.  
#tried https://www.digitalocean.com/community/tutorials/how-to-install-ruby-on-rails-with-rvm-on-ubuntu-18-04
#result: worked.  'source /usr/local/rvm/scripts/rvm' rather than what is in guide
rvm install 1.9.3
#won't work until you do below
#add deb http://security.ubuntu.com/ubuntu bionic-security main to /etc/apt/sources.list
sudo apt update
sudo apt-get install -y libssl1.0-dev
#try again
rvm install 1.9.3
#rvm use 1.9.3
#gem install rails -v 3.0.0
#pre-req's fullfilled, can now install snorby
git clone git://github.com/Snorby/snorby.git
cd snorby
#bundle install #fails to find a few gem dependencies
#bundle update #fails
#bundle install --path vendor/cache #fails
#all above fails due to outdated dependencies, research sows that ruby is maintained by lazy people/moves forward too fast for mass maintenance
rvm use 2.6.3
sudo gem install rails
bundle install
#error installing do_postgres (0.10.17), do a gem install do_postgres -v 0.10.17 --source 'https://rubygems.org/'
#and that failed too, failed to build gem native extension
sudo apt-get install -y ruby-dev
##########################################################################################################################
######  jesus christ still missing dependencies on backend.  Tomorrow, consider smoothsec install over the machine  ######  
### smoothsec is a lightweight snort/surricata IDS with snorby, unified2, pulledpork, pigsty, built on debian 7 wheezy ###
#####################  more info on smoothsec is available at https://github.com/smoothsec/docs/wiki  ####################
installing from iso... ###################################################################################################
#setup new root passwd
#setup new user
#setup new user passwd
#setup snorby account info
#setup snorby account passwd
#reboot
npm update pigsty -g && npm update pigsty-mysql -g
#because debian 7 wheezy is EOL, add the archive to sources.list
echo 'deb http://archive.debian.org/debian wheezy-updates main' >> /etc/apt/sources.list
echo 'deb http://archive.debian.org/debian-security wheezy-updates main' >> /etc/apt/sources.list
#update
apt-get update
#just some minor improvements to smoothsec
apt-get install arpalert openjdk-7-jre fail2ban
cd /etc/arpalert/
mv oui.txt oui.txt.old
apt-get -y rsyslog
wget http://http://standards-oui.ieee.org/oui.txt
#visit http://<newIp>:443 and configure snorby
set time zone under settings>
set everything else under Administration>
#go into the following and configure according to your use case
/etc/smoothsec.cfg
/etc/arpalert.conf
/etc/pulledpork/snort/
/etc/pulledpork/suricata/
/etc/snort/snort.conf
/etc/suricata/suricata.yaml
#install other useful stuff
apt-get install -y htop
apt-get install -y iftop
###################################################################################################
###################################### "it JUST WORKS" ############################################
###################################################################################################
general idea
<curl from ip blacklist to> /var/db/snort/iprep/emerging-compromised-ips.txt

###############################################################################################################
### Update: Failing to update snort.org's registered rules due to the snort version installed with smoothsec.  
### I took the time to type out my oinkcode so I am set on using it.  
### Smoothsec is built on Wheezy, which is retired/archived.  
### Guess it's time to upgrade so that we can keep up with new package dependencies. 
### Updating to Jessie.  
# total steps for this section will be
# 1. upgrade dist to jessie
# 2. your snorby worker will stop running.  fix it
# 3. verify startup scripts
# x. upgrade snort to 2.9.9.x
# x. go through snort and pulledpork configs to catch new differences
# x. verify new snort configs
# x. verify suricata configs

#####################################################
######## Updating Smoothsec build to Jessie #########
#####################################################
###############################################
#1. 
###############################################
#2. fix snorby worker not running
###
sudo nano /var/www/snorby/config/config/snorby_config.yml
# reflect these changes
production:
  domain: demo.snorby.org
  wkhtmltopdf: /usr/local/bin/wkhtmltopdf
  ssl: false
  mailer_sender: snorby@snorby.org
  geoip_uri: http://geolite.maxmind.com/download/geoip/database/GeoLiteCountry/GeoIP.dat.gz
  authentication_mode: database
  time_zone: 'America/Chicago'
development:
  domain: localhost:3000
  wkhtmltopdf: /Users/mephux/.rvm/gems/ruby-1.9.2-p0/bin/wkhtmltopdf
  ssl: false
  mailer_sender: snorby@snorby.org
  geoip_uri: http://geolite.maxmind.com/download/geoip/database/GeoLiteCountry/GeoIP.dat.gz
  time_zone: 'Africa/Freetown'
# init.d is still working so restart snorby
sudo /etc/init.d/snorby restart
# ping test yields alerts, snort and snorby are working.  
###############################################
#3. verify startup scripts
###
# reboot the machine
sudo reboot -h
ps aux | grep snort  
ps aux | grep pigsty 
# if both processes are running then you are good to go
# if they are not then complete the following: 
sudo nano /etc/init.d/snortautorun
	#!/bin/bash
	### BEGIN INIT INFO
	# Provides:          scriptname
	# Required-Start:    $remote_fs $syslog
	# Required-Stop:     $remote_fs $syslog
	# Default-Start:     2 3 4 5
	# Default-Stop:      0 1 6
	# Short-Description: Start daemon at boot time
	# Description:       Enable service provided by daemon.
	### END INIT INFO


	case "$1" in
	  start)
	    if ps -C snort> /dev/null; then
	    echo "SNORT is already running"

	    else

	    sudo snort -D -u snort -g snort -c /etc/snort/snort.conf -i <monitor interface>

	    echo "SNORT is ON"
	    fi
	    ;;
	  stop)

	    if ps -C snort> /dev/null; then
	    sudo rm /var/run/snort_<monitor interface>.pid
	    sudo rm /var/run/snort_<monitor interface>.pid.lck

	    echo "Stopping SNORT"
	    sudo pkill snort

	else

	    echo "SNORT is already OFF"

	    fi
	    ;;
	  *)
		echo "Usage: /etc/init.d/snortautorun {start|stop}"
		exit 1
		;;
	esac

	exit 0
# then changemod the script so it can execute
sudo chmod +x /etc/init.d/snortautorun
sudo update-rc.d snortautorun defaults
###############################################
#3. upgrade to current snort version
###
# backup your configs
mkdir /home/*/snort_conf_backup
cd /etc/snort/
cp -R ./* /home/*/snort_conf_backup
# for peace of mind, check that your configs are backed up
ls /home/*/snort_conf_backup
# download tarballs
wget https://www.snort.org/downloads/snort/daq-2.0.6.tar.gz
wget https://www.snort.org/downloads/snort/snort-2.9.14.1.tar.gz
# pack them
tar xvzf daq-2.0.6.tar.gz
tar xvzf snort-2.9.14.1.tar.gz
# install daq
cd daq-2.0.6
./configure && make && sudo make install
####### NOTE if you receive errors then follow the below steps #######
# need to uninstall libdnet, reinstall with ./configure fPIC option
sudo apt-get remove libdnet
wget http://prdownloads.sourceforge.net/libdnet-1.11.tar.gz
cd libdnet*
tar zxvf libdnet-1.11.tar.gz
./configure "CFLAGS=-fPIC -g -O2"  # note that is an uppercase o, not the number zero, in -O2
make && sudo make install
ln -s libdnet.1.1 libdnet.so.1.1
ldconfig -Rv /usr/local/lib 2>&1 | grep dnet  # you should see Adding /usr/local/lib/libdnet.so.1.1
# alternately, 
libtoolize --copy --force
aclocal -I config
autoheader
autoconf
automake --foreign
##################### continuing installation #######################
# now remove old snort and install new snort
# apt-get remove snort
cd ../snort-2.9.14.1
./configure --enable-sourcefire && make && sudo make install
###### NOTE if you receive errors then follow the below steps #######
cd /home/*/snort
wget http://luajit.org/download/LuaJIT-2.0.5.tar.gz
tar zxvf LuaJIT-2.0.5.tar.gz
cd LuaJIT*
make && install
# now try again
cd ../snort*
./configure --enable-sourcefire && make && sudo make install
##################### continuing installation #######################
# check install and version for verification
/usr/local/bin/snort -V
# finally clear out any skeleton packages
sudo apt-get autoremove && sudo apt-get autoclean
# diff your new vs old snort config files now.  they likely did not change because you have the old config
# I ran snort to confirm that it's running
# geeze I'm not getting another luajit error for not having another version of luajit installed
# in meantime, suricata is up and running splendidly
# focus on tuning suricata for now to see how well it can do on this machine
# return to snort afterward



